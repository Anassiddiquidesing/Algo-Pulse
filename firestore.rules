/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for accounts, trades, and reports nested under /users/{userId}.
 * All data is nested under /users/{userId}/..., ensuring that only the authenticated user can access their own data.
 * The /ea_runs/{eaId} collection is globally accessible and requires authentication for all operations.
 *
 * Key Security Decisions:
 * - Users can only access their own accounts, trades and reports.
 * - Listing of user documents is allowed only for the owner.
 * - The ea_runs collection is only available to authenticated users.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by a signed-in user.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the request is made by the owner of the document.
     * @param {string} userId The user ID to compare against the request's authentication UID.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the request is made by the owner of an existing document.
     * @param {string} userId The user ID to compare against the request's authentication UID.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces document ownership for writes.
     * @path /users/{userId}/accounts/{accountId}
     * @allow (create) User 'user_abc' can create an account if request.auth.uid == 'user_abc'.
     * @deny (create) User 'user_xyz' cannot create an account under /users/user_abc if request.auth.uid != 'user_abc'.
     * @allow (update) User 'user_abc' can update their own account.
     * @deny (update) User 'user_xyz' cannot update an account under /users/user_abc.
     * @allow (delete) User 'user_abc' can delete their own account.
     * @deny (delete) User 'user_xyz' cannot delete the account under /users/user_abc.
     * @allow (get) User 'user_abc' can get their own account.
     * @allow (list) User 'user_abc' can list their own accounts.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/accounts/{accountId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId) && request.resource.data.id == accountId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces document ownership for trades.
     * @path /users/{userId}/accounts/{accountId}/trades/{tradeId}
     * @allow (create) User 'user_abc' can create a trade under their account if request.auth.uid == 'user_abc'.
     * @deny (create) User 'user_xyz' cannot create a trade under /users/user_abc's account.
     * @allow (update) User 'user_abc' can update their own trade.
     * @deny (update) User 'user_xyz' cannot update a trade under /users/user_abc's account.
     * @allow (delete) User 'user_abc' can delete their own trade.
     * @deny (delete) User 'user_xyz' cannot delete a trade under /users/user_abc's account.
     * @allow (get) User 'user_abc' can get their own trade.
     * @allow (list) User 'user_abc' can list their own trades.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/accounts/{accountId}/trades/{tradeId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId) && request.resource.data.accountId == accountId;
      allow update: if isExistingOwner(userId) && request.resource.data.accountId == resource.data.accountId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces document ownership for reports.
     * @path /users/{userId}/reports/{reportId}
     * @allow (create) User 'user_abc' can create a report if request.auth.uid == 'user_abc'.
     * @deny (create) User 'user_xyz' cannot create a report under /users/user_abc.
     * @allow (update) User 'user_abc' can update their own report.
     * @deny (update) User 'user_xyz' cannot update a report under /users/user_abc.
     * @allow (delete) User 'user_abc' can delete their own report.
     * @deny (delete) User 'user_xyz' cannot delete the report under /users/user_abc.
     * @allow (get) User 'user_abc' can get their own report.
     * @allow (list) User 'user_abc' can list their own reports.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/reports/{reportId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

     /**
      * @description Allows authenticated users to read and write EA runs. This collection requires stricter access control in production.
      * @path /ea_runs/{eaId}
      * @allow (create) Any authenticated user can create an EA run.
      * @deny (create) An unauthenticated user cannot create an EA run.
      * @allow (update) Any authenticated user can update an EA run.
      * @deny (update) An unauthenticated user cannot update an EA run.
      * @allow (delete) Any authenticated user can delete an EA run.
      * @deny (delete) An unauthenticated user cannot delete an EA run.
      * @allow (get) Any authenticated user can get an EA run.
      * @allow (list) Any authenticated user can list EA runs.
      * @principle Requires authentication for all operations.
      */
    match /ea_runs/{eaId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();

      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }
  }
}